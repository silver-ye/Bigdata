나도코딩

<문자열>

* 모듈안의 모든 내용들을 불러오기
from 모듈명 import*

* 문자열 포맷
방법1)
print('나는 %s입니다.' % '김예은')
이런식으로 %뒤에 들어갈 값을 적어준다.
%s는 문자열, %d는 int, %c는 캐릭터로 하나의 문자값을 받는다.

방법2)
print('나는 {}과 {}을 좋아해요'.format('빵','떡'))
이런식으로 format뒤에 들어갈 값을 입력할 수도 있고 혹은
print('나는 {1}과 {0}을 좋아해요'.format('빵','떡'))
이런식으로 지정해서 0번값은 빵, 1번값은 떡으로 출력할 수도 있다.

방법3)
print('나는 {food2}과 {food1}을 좋아해요'.format(food1 = '빵', food2 = '떡'))
변수를 지정하고 {}안에 넣어서 호출하는 것도 가능하다.

방법4)
food1 = '빵'
food2 = '떡'
print(f'나는 {food1}과 {food2}을 좋아해요.')
print문에 f를 넣어서 시작해서 지정할 수도 있다.

* 문장 내에서 따음표
\"내용\" 을 사용해서 따음표와 같은 역할로 사용할 수 있다.
\'내용\' 작은 따음표도 사용이 가능하다. 

* \를 print에 나타내고 싶을 때, \\
경로를 쓸 때에 역슬래쉬가 많이 사용되는데 print문에서 역슬래쉬만을 나타내고싶다면 두번사용하면 된다.
print('C:\\User\\Nado\\Desktop)
이런식으로 사용되는 하나만 사용할 경우에는 오류가 나니깐 주의해야한다.

* 커서를 앞으로 이동해서 문자를 바꾸기(\r)
\r : 커서를 맨 앞으로 이동시킨다.
print('Red Apple\rPine')
Red Apple이 쳐져있고 \r을 통해서 커서가 맨 앞으로 가게 된다.
맨 앞으로 간 커서는 Fine을 치게 되면서 출력되는 값은 Pineapple이 된다.

* 한글자를 지우는 역할(\b)
\b : 백스페이스로 한 글자를 삭제한다.
print('Redd\bApple")
출력 : RedApple
백스페이스로 앞에 잘못쳐진 d를 지워서 출력하게 된다.

* 탭 역할{\t)
\t : 탭 역할을 한다.
print('Red\tApple')
출력 : Red	Apple
탭을 실제로 누른 것 처럼 출력한다.

<리스트>

* 리스트에서 사이에 추가하기(insert)
subway = [1, 3, 4]
subway.insert(1, '2')
insert(넣어줄 곳의 인덱스값, 추가할 값)
subway = [1, 2, 3, 4]로 추가가 된 것을 확인할 수 있다.

* 리스트에서 뒤에서 하나를 삭제하기(pop)
subway = [1, 2, 3, 4]
subway.pop()
subwaysubway = [1, 2, 3]
뒤에 4가 삭제되는 것을 확인할 수 있다.
pop을 통해서 뒤에 있는 하나가 삭제된다.

* 리스트를 모두 지우기(clear)
num = [1, 2, 3, 4, 5, 6]
num.clear()
리스안의 값들이 모두 지우지고 빈 리스트가 된다.

<딕셔너리>

* 딕셔너리의 값을 가져오기(get or [])
cabinet = {3: "유재석", 100: "김태호"}
print(cabinet.get(3))
출력 : 유재석
print(cabinet[3]) 
출력 : 유재석
2개는 값을 가져오는 역할이 같지만, []의 경우에 설정하지않은 값이 들어오면 그대로 종료되어버린다.
하지만, get은 None으로 없다는 나타내고 다음 문장으로 진행된다.

* 딕셔너리에 불러오는 값이 없어서 다른 단어 출력하기(get)
cabinet = {3: "유재석", 100: "김태호"}
print(cabinet.get(5, "사용가능"))
출력 : "사용가능"
현재 5에게는 값이 없어서 뒤에 써준 사용가능이 출력된다.
 
* 딕셔너리의 키를 숫자가아닌 단어로도 가능
cabinet = {"A-3": "유재석", "B-10": "김태호"}
print(cabinet["A-3"])
출력 : 유재석

* 딕셔너리의 추가, 삭제 방법([] = 값, del)
- 딕셔너리의 추가도 할 수 있으며, 원래 있던 값을 다른것으로 변경할 수도 있다.
cabinet = {"A-3": "유재석", "B-10": "김태호"}
cabinet["A-3"] = "김종국"
cabinet["C-50"] = "조세호"
print(cabinet)
출력 : {"A-3": "김종국", "B-10": "김태호", "C-50": 조세호}

* 딕셔너리 값을 삭제하기
del cabinet["A-3"]
print(cabinet)
출력 : {"B-10": "김태호", "C-50": 조세호}

* 딕셔너리를 빈 딕셔너리로 만들기
cabinet.clear()
빈 딕셔너리가 되어버린다.

<Set>

* set
중복이 되지않고, 순서가 없다.
my_set = {1, 2, 3, 3, 3}
print(my_set)
출력 : {1, 2, 3}
딕셔너리랑 비슷하지만 value값을 지정해주지않는다.
중복되는 값은 중복되지않게 출력한다.
python = set(['유재석', '박명수'])
이런식으로 안에 리스트를 넣고 set으로 지정해줄 수도 있다.

* 교집합으로 이용해보기(& or intersection)
java = {"유재석", "김태호", "양세형"}
python = set(['유재석', '박명수'])
print(java & python)
print(java.intersection(python))
출력 : {'유재석'}
        {'유재석'}

* 합집합으로 이용해보기(| or union)
java = {"유재석", "김태호", "양세형"}
python = set(['유재석', '박명수'])
print(java | python)
print(java.union(python))
출력 : {'김태호', '박명수', '유재석', '양세형'}
        {'김태호', '박명수', '유재석', '양세형'}

* 차집합으로 이용해보기(- or difference)
java = {"유재석", "김태호", "양세형"}
python = set(['유재석', '박명수'])
# java를 할 수 있지만, python은 할 줄 모르는 집합
print(java - python)
print(java.difference(python))
출력 : {'양세형', '김태호'}
        {'양세형', '김태호'}

* set에 추가하거나 지우기(add, remove)
python.add('김태호')
java.remove('김태호')

<자료구조의 변경>

* 자료구조를 변경해보기(list, set, tuple)
menu = {'커피', '우유', '주스'}
print(menu, type(menu))

menu = list(menu)
print(menu, type(menu))

menu = tuple(menu)
print(menu, type(menu))

출력 : {'커피', '우유', '주스'} <class 'set'>
        ['커피', '우유', '주스'] <class 'list'>
        ('커피', '우유', '주스') <class 'tuple'>

<한 줄 for>

* 한 줄로 사용하는 for문
ex) 출석번호가 1, 2, 3, 4 앞에 100을 붙이기
students = [1, 2, 3, 4]
# i에 입력되는 값에 +100을 해서 students에 넣어준다는 for문이다.
students = [i+100 for i in students]
print(students)
출력 : [101, 102, 103, 104]

ex) 학생 이름을 길이로 변환하기
students = ['iron man', 'thor', 'I am groot']
students = [len(i) for i in students]
print(students)
출력 : [8, 4, 10]

<함수>
* return 값이 2개인 함수
def withdraw_night(balance, money):
	comission = 100
	return comission, balance - money - commission
balance = 1000
# balance의 1000원의 잔액을 집어넣었고 withdraw_night함수가 실행된 후에 commission을 변수 commission값에
balance - money - commission을 변수 balance의 집어넣는다. 
commission, balance = withdraw_night(balance, 500)
print("수수료 {}원이며, 잔액은 {}원입니다".format(commission, balance)
출력 : 수수료는 100원이며, 잔액은 400원입니다.

※ 팁
* 코드를 치다가 줄이 길어져서 밑으로 줄을 내리고 싶을 때(\)
print('나나나나나나난나나나나나나나나나나난나나나난나나나 \ 
나나나나나나나난나나나나나나난나난나나나나나난')
이런식으로 줄을 바꾸기전에 \을 쳐주고 내려주면 연결이 된다.

* 기본값(default)을 주기
def profile(name, age = 17, main_lang = '한글')
	print('이름 : {} 나이 : {} 주언어 : {}'.format(name, age, main_lang))
profile('유재석')
출력 : 이름 : 유재석 나이 : 17 주언어 : 한글
=으로 기본값을 설정해주면 특별히 다른 값을 넣지않으면 기본값으로 출력된다.

<가변인자>
- 변하는 인자을 지정해주는 걸 말한다.
* 가변인자로 함수 지정해보기
# *으로 가변인자를 등록한다. 
def profile(name, age, *language):
	# end = ' ' 이런식으로 써주면 print뒤에 다른 문장들이 줄바꿈되서 나오지않고 한 칸을 띄고 이어져서 출력된다.
	print('이름 : {} 나이 : {}'.format(name, age), end = ' ')
	# language 가변인자에 들어있던 값들을 하나씩 불러 lang인자에 넣어주고 하나씩 출력한다.
             for lang in language:
		print(lang, end = ' ')
	print()
profile('유재석', 20, '파이썬', '자바', 'c언어', 'c++', '자바스크립트')
profile('김태호', 25, 'c언어', '자바스크립트', 'c++')
출력 : 이름 : 유재석 나이 : 20 파이썬 자바 c언어 c++ 자바스크립트
        이름 : 김태호 나이 : 25 c언어 자바스크립트 c++

<지역변수와 전역변수>
* 지역변수(global)
gun = 10
def checkpoint(soldiers):
# gun은 현재 함수밖에 위치하고 있어서 그냥 gun을 사용해서 변수를 지정해버리면 이 안의 값으로만 되고
밖의 gun과는 다른것이기에 불러와야하는데 이걸 지역변수라고 하고 global을 사용해서 지정해주면 불러올 수 있다.
	global gun
	gun = gun - soldiers
	print('함수 내 남은 총: {}'.format(gun))
print('전체 총: {}.format(gun))
checkpoint(2) #gun = gun - soldiers으로 gun에게 값을 반환했기에 남은 총도 8개이다.
print('남은 총: {}.format(gun))

출력 : 전체 총: 10
        함수 내 남은 총: 8
        남은 총: 8

* 전역변수
밖에 있는 gun을 지역변수로 불러들이지않고서 사용하는 방법
gun = 10
#gun의 값을 함수에서 받아서 사용한다.
def checkpoint_ret(gun,soldiers):
	gun = gun - soldiers
	print('함수 내 남은 총: {}'.format(gun))
             return gun
print('전체 총: {}.format(gun))
gun = checkpoint_ret(gun,2)  #밖의 위치한 gun의 값을 받고 함수 결과를 다시 gun에서 반환해준다.
print('남은 총: {}.format(gun))	

출력 : 전체 총: 10
        함수 내 남은 총: 8
        남은 총: 8

<표준입출력>
* print할 때, 중간 삽입과 마무리(sep, end)
print('python', 'java'. sep = ',', end = '?')
출력 : pythno, java?
sep = '하나마다 삽입될 것' 
하나씩 출력할 때 마다 삽입되게 하기위해서는 sep이고 마무리에 넣을려면 end이다.

* 표준출력, 표준에러(stdout, stderr)
import sys
print('python', 'java', file = sys.stdout)
print('python', 'java', file = sys.stderr)
stdout는 표준출력, stderr은 표준에러
표준에러가 난 부분은 확인을 하고 따로 수정을 하고 한다는 의미이다.

* print시에 정렬하고 공간을 확보해주기(ljust, rjust)
scores = {'수학':0, '영어':50, '코딩':100}
for subject, score in scores.itmes():
	# ljust(x)는 left로 정렬하는데 x만큼의 공간을 확보하겠다는 의미로 rjust는 right를 의미한다.
	print(subjec.ljust(8), str(score).rjust(5), sep = ':')
출력 : 수학       :    0
        영어       :   50
        코딩       :  100

* 0으로 채우기(zfile)
for num in range(1,5):
	#zfile(x)은 0을 채워주는데 x만큼의 공간을 확보해서 채우는 것이다.
	print('대기번호 : ' + str(num).zfile(3))
출력 : 대기번호 : 001
        대기번호 : 002
        대기번호 : 003
        대기번호 : 004

* 정렬, 부호붙이기, 빈칸 채우기
# >오른쪽으로 정렬하는데 :하고 빈칸이 있으니 빈칸으로 10칸을 채우고 500을 출력
print('{0: >10}'.format(500))
출력 :           500

# +를 붙여서 양수이면 +, 음수이면 -로 표시된다.
print('{0: >+10}'.format(500))
print('{0: >+10}'.format(-500))
출력 :          +500
                  -500 

# <으로 왼쪽으로 정렬하고 빈칸을 _로 채우기
print('{0:_<10}'.format(500))
출력 : 500__________

# 3자리마다 콤마를 찍어주기
print('{0:,}'.format(10000000))
출력 : 10,000,000

# 3자리마다 콤마를 찍어주고, +,- 부호도 붙이기
print('{0:+,}'.format(10000000))
print('{0:+,}'.format(-10000000))
출력 : +10,000,000
         -10,000,000

# 3자리마다 콤마를 찍어주고, 부호도 붙이고, 자릿수도 확보하고 ^으로 채우기
print('{0:^<+30,}'.format(100000000000))
출력 : +100,000,000,000^^^^^^^^^^^^^^^^^

# 소수점 출력
print('{0:f}'.format(5/3))
출력 : 1.666667

# 소수점 특정 자리수까지만 표시(반올림된다)
print('{0:2f}'.format(5/3))
출력 : 1.67

* 파일 입력
# 파일을 쓰기
# 파일을 쓴다는 의미로 w를 출력해주고 왠만하면 뒤에 encoding을 작성하는 것이 좋다
score_file = open('score.txt', 'w', encoding='utf8')
# score.txt라는 파일이 형성되고 그 안에 밑에 값들이 담기게 된다.
print('수학 : 0', file = score_file)
print('영어 : 50', file = score_file)
score_file.close()


# 파일을 다시 이어서 쓰기
# a를 적어서 이미 입력된 파일을 불러와서 이어쓴다고 나타낸다.
score_file = open('score.txt', 'a', encoding='utf8')
# 이미 적혀있는 파일에 밑에 값들이 추가된다.
score_file.write('과학 : 80, file = score_file)
score_file.write('코딩 : 100', file = score_file)
score_file.close()

* 파일 출력
# r은 파일을 읽는다는 의미이다.
score_file = open('score.txt', 'r', encoding='utf8')
# 모든 파일의 내용들을 읽어온다.
print(score_file.read())
score_file.close()

# 파일을 줄별로 읽기
score_file = open('score.txt', 'r', encoding='utf8')
# 줄별로 파일을 읽어오는데 한 줄을 읽고 커서는 다음 줄로 이동한다.
print(score_file.readline())
print(score_file.readline())
print(score_file.readline())
print(score_file.readline())
score_file.close()

# 파일을 줄별로 읽기(while문을 사용)
score_file = open('score.txt', 'r', encoding='utf8')
while true:
	line = print(score_file.readline())
	if not line:
		break
	print(line, end = ' ')
score_file.close()

# 파일을 줄별로 읽기(for문을 사용)
score_file = open('score.txt', 'r', encoding='utf8')
# line을 list형태로 저장
lines = print(score_file.readline())
for line in lines:
	print(line, end = ' ')
score_file.close()

* pickle
# 파일을 쓰기
import pickle
# pickle은 encoding을 쓰지 않아도 되며, wd는 쓴다는 의미이다.
profile_file = open('profils.pickle', 'wd')
profile = {'이름':'박명수', '나이':30, '취미':['축구', '골프', '코딩']}
# profile에 있는 정보를 profile__file에 저장
pickle.dump(profile, profile_file) 
profile_file.close()

# 파일을 읽어오기
import pickle
# rd는 읽어온다는 의미이다.
profile_file = open('profils.pickle', 'rd')
# profile_file에 있는 정보를 profile에 불러온다는 의미이다.
profile = pickle.load(profile_file)
profile_file.close()

* with
import pickle
# profile.pickle에서 정보를 불러와서 profile_file에 저장한다.
with open('profile.pickle', 'rd') as proile_file:
	# with에서 나오면 자동으로 빠져나오기에 close를 해주지않아도 된다.
	print(pickle.load(profile_file))

# with을 통해서 쓰기
with open('study.txt', 'w', encoding='utf8') as study_file:
	study_file.write('파이썬을 열심히 공부해요')


<클래스>
* 클래스 예제

class AttackUnit:
    # __init__은 처음에 시작해주는 것이다.
    def __init__(self, name, hp, damage):
        self.name = name
        self.hp = hp
        self.damage = damage
        
    def attack(self, location):
        print('{} : {} 방향으로 적군을 공격합니다. [공격력 {}]'\
            .format(self.name, location, self.damage))

    def damaged(self, damage):
        print('{} : {} 데미지를 입었습니다.'.format(self.name, damage))
        self.hp -= damage
        print('{} : 현재 체력은 {} 입니다.'.format(self.name, self.hp))
        if self.hp <= 0:
            print('{} : 파괴되었습니다.'.format(self.name))
        
firebat1 = AttackUnit('파이어벳', 50, 16)
firebat1.attack("5시")

firebat1.damaged(25)
firebat1.damaged(25)

출력 : 파이어벳 : 5시 방향으로 적군을 공격합니다. [공격력 16]
파이어벳 : 25 데미지를 입었습니다.
파이어벳 : 현재 체력은 25 입니다.
파이어벳 : 25 데미지를 입었습니다.
파이어벳 : 현재 체력은 0 입니다.
파이어벳 : 파괴되었습니다.

* 클래스 상속
# Unit 클래스에 부분이 AttackUnit 클래스랑 겹치는데 이를 상속해준다.
class Unit:
    def __init__(self, name, hp):
        self.name = name
        self.hp = hp
# 클래스 옆에 괄호를 생성하고 안에 상속할 클래스를 넣어준다.
class AttackUnit(Unit):
    def __init__(self, name, hp, damage):
        # Unit.__init__ 으로 Unit __init__에 들어있는 값을 상속받는다.
        Unit.__init__(self, name, hp)
        self.damage = damage

    def attack(self, location):
        print('{} : {} 방향으로 적군을 공격합니다. [공격력 {}]'\
            .format(self.name, location, self.damage))

    def damaged(self, damage):
        print('{} : {} 데미지를 입었습니다.'.format(self.name, damage))
        self.hp -= damage
        print('{} : 현재 체력은 {} 입니다.'.format(self.name, self.hp))
        if self.hp <= 0:
            print('{} : 파괴되었습니다.'.format(self.name))
    
firebat1 = AttackUnit('파이어벳', 50, 16)
firebat1.attack("5시")

firebat1.damaged(25)
firebat1.damaged(25)

# 상속을 받아서 값은 바뀌지 않고 동일하게 출력된다.    
출력 : 파이어벳 : 5시 방향으로 적군을 공격합니다. [공격력 16]
파이어벳 : 25 데미지를 입었습니다.
파이어벳 : 현재 체력은 25 입니다.
파이어벳 : 25 데미지를 입었습니다.
파이어벳 : 현재 체력은 0 입니다.
파이어벳 : 파괴되었습니다.

* 다중상속

class Flyable:
    def __init__(self, flying_speed):
        self.flying_speed = flying_speed
    def fly(self, name, location):
        print('{} : {} 방향으로 날아갑니다. [속도 {}]'\
            .format(name, location, self.flying_speed))

class FlyableAttackUnit(AttackUnit, Flyable):
    def __init__(self, name, hp, damage, flying_speed):
        AttackUnit.__init__(self, name, hp, damage)
        Flyable.__init__(self, flying_speed)

# 발키리 :  공중 공격 유닛, 한번에 14살 미사일 발사
# 날 수 있는 기능과 공격 기능을 같이 있어야해서 다중 상속을 받아서 처리애햐한다.
valkyrie = FlyableAttackUnit('발키리', 200, 6, 5)
valkyrie.fly(valkyrie.name, '3시')

출력 : 발키리 : 3시 방향으로 날아갑니다. [속도 5]

* super

class Unit:
    def __init__(self):
        print("Unit 생성자")

class Flyable:
    def __init__(self):
        print('Flyable 생성자')

# super에 다중일 때는 앞에 있는 클래스만 들어가니깐 super가 아니라
# Unit.__init__(self)
# Flyable.__init__(self)
# 이런식으로 출력해주는 것이 좋다.
class FlyableUnit(Flyable, Unit):
    def __init__(self):
        super().__init__()

dropship = FlyableUnit()

출력 : Flyable 생성자

<예외처리>
* 어떤 에러가 발생했는지 에러에 관한 메세지를 받고 싶을 때(as err)
try: 
	내용 내용

# except에는 뒤에 에러 내용을 넣어서 그 에러가 나면 문구가 뜨게 사용할 수도 있다.
# ex) except ValueError: print('잘못된 값을 입력하였습니다.') 이런식으로 사용가능하다.
# 이런 지정된 에러가 아닌 다른 에러들에 대해서 값을 받고 싶을 때는 exception을 사용해서 받을 수 있다.
# print(err)을 통해 에러의 문구를 받는다.
except Exception as err:
	print(err)

* 사용자 정의 예외처리
# 사용자가 에러를 지정해주기
class BigNumberError(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg

try:
    print('한 자리 숫자 나누기 전용 계산기입니다.')
    num1 = int(input('첫번째 숫자를 입력하세요 : '))
    num2 = int(input('두번째 숫자를 입력하세요 : '))
    if num1 >= 10 or num2 >= 10:
        # 사용자가 지정한 에러말고도 valueerror같은 에러들을 지정해서 결과값이 나타나게 할 수 있다.
        raise BigNumberError('입력값 : {}, {}'.format(num1, num2))
    print('{} / {} = {}'.format(num1, num2, int(num1 / num2)))

except ValueError:
    print('잘못된 값을 입력하셨습니다. 한 자리 숫자만 입력하세요.')

except BigNumberError:
    print('에러가 발생하였습니다. 한 자리 숫자만 입력하세요.')

finally:
    # 오류가 실행되는거에 상관없이 마지막에 실행된다.
    print('계산기를 이용해 주셔서 감사합니다.')

<모듈>
1) 모듈 파일을 만들어서 모듈을 생성한다
2) 모듈에 함수를 설정한다
3) 모듈을 import하고 함수를 사용한다./

* 모듈을 생성하는 방법
1) theater_module.py라는 파일을 생성한다.
2) 안에 함수들을 설정한다.

def price(people):
    print('{}명 가격은 {}원 입니다.'.format(people, people * 10000))

def price_moring(people):
    print('{}명 조조 가격은 {}원 입니다.'.format(people, people * 6000))

def price_soldier(people):
    print('{}명 군인 할인 가격은 {}원 입니다.'.format(people, people * 4000))

* 모듈을 사용하기
# import를 통해서 모듈을 불러와서 사용하기
import theater_module
theater_module.price(3)
theater_module.price_moring(4)
theater_module.price_soldier(5)

# 모듈에 as를 이용하여 별칭을 지어서 사용하기
import theater_module as mv
mv.price(3)

# 모듈안에 모든 것들을 사용한다고 지정해서 곧장 사용하기
from theater_module import*
price(3)

# 모듈안의 함수에 별칭을 지정한 것으로 값은 price_soldier값이 나오게 된다.
from theater_module import price_soldier as price
price(5)


* 패키지
1) 새로운 폴더를 만들어주기(ex) travel)
2) 폴더안에 파일들을 생성해주기(만들고 싶은 클래스의 파일명들과 __init__.py 도 생성)
3) 만든 파일안에 class를 생성해주기
class ThailandPackage:
    def detail(self):
        print('[태국 패키지 3박 5일] 방콕, 파타야 여행 (야시장 투어) 50만원')
(thailand.py)

class VietnamPackage:
    def detail(self):
        print('[베트남 패키지 3박 5일] 다낭 효도 여행 60만원')
(vietnam.py)
4) 새로운 파일을 생성해서 그 안에서 클래스들을 사용할 수 있다.
import travel.thailand
trip_to =  travel.thailand.ThailandPackage()
trip_to.detail()
이런식으로 사용이 가능하다.
5) import를 사용해서 travel폴더 안의 모든걸 불러오고 싶을 때의 방법
__all__ = ['vietnam' , 'thailand']
(__init__.py)
이런식으로 init안에 import할 범위를 지정해주어야지 사용할 수 있다.
from travel import *
trip_to = thailand.ThailandPackage()
trip_to.detail()
(새로운파일.py)
범위를 지정했으니 이런식으로 다 불러와서 사용할 수가 있다.

* 직접적으로 모듈을 사용하는지 확인하기(__main__)
class ThailandPackage:
    def detail(self):
        print('[태국 패키지 3박 5일] 방콕, 파타야 여행 (야시장 투어) 50만원')

if __name__ == '__main__':
    # thailand.py파일에서 직접적으로 모듈을 실행할 때는 사용된다.
    print('Thailand 모듈을 직접 실행')
    print('이 문장은 모듈을 직접 실행할 때만 실행됩니다.')
    trip_to = ThailandPackage()
    trip_to.detail()
else:
    # 다른 파일에서 import를 사용해서 모듈을 호출할 떄 사용된다.
    print('Thailand 외부에서 모듈 호출')
(thailand.py)

* 모듈의 위치를 확인하기(inspect)
impott inspect
from travel import *
print(inspect.getfile(thailand))
출력 : 파일의 위치(c:\user\coding\ ...)
 
* 외장함수
# glob : 경로 내의 폴더 / 파일 목록 조회(윈도우dir)
import glob
print(glob.glob('*.py')) # 확장자가 py인 모든 파일

# os : 운영체제에서 제공하는 기본 기능
import os
print(os.getcwd()) # 현재 디렉토리

folder  = 'sample_dir'

if os.path.exists(folder):
       print('이미 존재하는 폴더입니다.')
       os.rmdir(folder)
       print(fodler, '폴더를 삭제하였습니다.')
else:
       os.makedirs(folder) #없다면 폴더를 생성
       print('이미 존재하는 폴더입니다.')

# time : 시간 관련 함수
import time
print(time.localtime())
print(time.strftime('%Y-%m-%d %H:%M:%S'))

# datetime : 오늘 날짜
import datetime
print('오늘 날짜는 ', datetime.date.today())

# timedelta : 두 날짜 사이의 간격
today - datetime.date.today() # 오늘 날짜 지정
td = datetime.timedelta(days=100) # 100일 저장
print('우리가 만난지 100일은", today + td) 
