select version(); -- 버전을 확인하기
create database pbldb;
show databases;
show tables;
use mysql;
use pbldb;
create user pbl@localhost identified by 'pblpw';
create user pbl@'%' identified by 'pblpw';
grant all privileges on pbldb.* to 'pbl'@'localhost' with grant option;
grant all privileges on pbldb.* to 'pbl'@'%' with grant option;

select user,host from mysql.user;
select user();
flush privileges;
show grants for pbl@localhost;

CREATE Table pets(
Name varchar(20),
Owner varchar(20),
species varchar(20),
gender char(1),
birth date,
death date);
show tables;
desc pets; #pets안에 있는 것을 보여준다 

show tables;
INSERT into pets (name, owner) VALUES ('삐삐', 'carami');
-- SELECT 컬럼리스트 from 테이블명 WHERE...
SELECT * FROM pets; -- NULL은 애초에 값이 없는 것
desc pets;

SELECT name, owner, birth FROM pets; -- SELECT 다음에 컬럼명을 적을때는 ,를 적어서 나눠준다. ,가 없으면 FROM 테이블명을 적는데 ,로 테이블명도 구분할 수 있음
-- *를 사용해서 모든걸 조회할 수도 있음.

-- #조건으로 검색하기
SELECT * FROM pets WHERE name = 'Slim' AND owner = 'Benny';
-- if문과 같이 AND와 OR을 조건문을 작성할 수 있다.
-- Null값은 없는지 있는지로 확인해야한다.
SELECT * FROM pets WHERE species = "dog" AND gender = "f";
-- mySQL은 대소문자 상관없이 보여준다.
SELECT * FROM pets WHERE birth >= "1998-1-1";

-- #정렬
SELECT Name, Owner, birth FROM pets ORDER BY birth desc;
-- desc는 내림차순을 애기하고 desc를 치지않으면 디폴트값으로 오름차순으로 정렬된다.
SELECT Name, Owner, birth FROM pets ORDER BY 3 asc, 1;
-- 3은 3번쨰 나오는 커럼을 기준으로 정렬한다는걸 애기한다. 즉, 여기서는 birth
flush privileges;
SELECT * FROM pets WHERE species = "snake" OR species = "bird";

-- #특정조건을 정해서 찾기
SELECT * FROM pets
WHERE Name like '_o';
-- _(언더바)는 무조건 한글자를 의미한다. 두번째 글자가 o인 것을 찾는다.
SELECT * FROM pets WHERE Name like '%u%';
-- %는 없을 수도 있고 여러가지일 수도 있다. 이름에 b가 들어있는 것들을 찾는다.
SELECT * FROM pets WHERE name LIKE "_____";
-- 이름이 5글자인 pets를 찾아보기

-- #카운팅하기
SELECT count(*) FROM pets;
-- Null인 값은 세지지 않으니 그냥 *로 모두 카운트하는 것을 사용한다.
SELECT distinct species FROM pets;
-- distinct는 중복된 값을 제외하고 보여준다
SELECT count(distinct species) from pets;
-- 중복된 값을 제외하고 세는거라서 4개의 종류가 나온다.

SHOW tables;
DESC emp;
SELECT * FROM emp WHERE DEPTNO = "10" AND JOB = "MANAGER";

-- # alias
SELECT * FROM emp;
SELECT empno 사번, ename 이름, job 업무 FROM emp;
-- "사  번" 안에 공백을 채울려면 ""으로 넣어서 하면 오류가 나지 않는다. as를 사용해서 별칭을 나타내도 되지만 쓰지 않아도 된다.

-- #concat 결합함수
SELECT * FROM emp;
SELECT CONCAT(ename, '사원의 업무는 ', job, '입니다.') FROM emp;