04.09.금 database3

##복습
-- 순서
SELECT -> FROM -> WHERE -> GROUP BY -> HAVING -> ORDER BY -> LIMIT

-- GROUP BY
WHERE과 HAVING의 다른 점은 WHERE은 모든 데이터를 HAVING은 GROUP하고나서의 데이터로서의 차이가 있다.

-- JOIN
NATURAL JOIN : 컬럼명이 같은 애들을 알아서 JOIN한다.
JOIN USING : 같은 칼럼명이 많을 때, 특정한 칼럼으로만 정해서 JOIN할 수 있다.
JOIN ON : 칼럼명이 다르지만 값이 같을 때, JOIN할 수 있다.
INNTER JOIN : 조건이 딱 맞는 조건들만 JOIN한다.
OUTER JOIN : LEFT와 RIGHT로 어디를 보여줄지를 정해야한다. 

-- BETWEEN AND
BETWEEN AND : 사이의 값을 찾아내서 지정할 수 있다. 앞쪽의 값이 뒤쪽의 값보다 작아야한다.


##진도
-- 사원을 관리하는 매니저의 이름을 구하여라. WHERE문과 JOIN ON을 각각 사용해서 결과값을 얻어보기.
SELECT E.EMPNO 사번, E.ENAME 사원이름, M.EMPNO 매니저사번, M.ENAME 매니저이름 FROM EMP E, EMP M WHERE E.MGR = M.EMPNO;
SELECT E.EMPNO 사번, E.ENAME 사원이름, M.EMPNO 매니저사번, M.ENAME 매니저이름 FROM EMP E JOIN EMP M ON(E.MGR = M.EMPNO);

-- ##서브쿼리 : 커리문안에 또 다른 커리가 들어오는 것
-- SMITH사원 부서의 평균 급여를 알고 싶어요.
SELECT AVG(SAL) FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = 'SMITH');

-- FORD사원보다 급여를 많이 받는 사원들의 정보를 알고 싶어요.
SELECT * FROM EMP WHERE SAL > (SELECT SAL FROM EMP WHERE ENAME = 'FORD'); 

-- 전체의 평균 급어보다 작게 받는 사람들을 알고 싶어요.
SELECT * FROM EMP WHERE SAL < (SELECT AVG(SAL) FROM EMP); 

-- SCOTT와 다른 부서 사원들의 정보를 알고 싶어요.
SELECT * FROM EMP WHERE DEPTNO <> (SELECT DEPTNO FROM EMP WHERE ENAME = 'SCOTT');

-- 테이블자체에도 서브커리를 만들어서 사용할 수 있다.
-- 이 테이블에서 쓸 것을 정해줘얗기 Alias를 적어줘야한다. 안적으면 오류가 발생한다.
-- 서브커리를 중복으로 쓸 수 있다.
SELECT * FROM (SELECT * FROM EMP WHERE DEPTNO = 10) A;

-- 부서별로 이름의 알파벳순으로 결과를 받고싶어요. 단일행의 값이면 =이 가능하지만, 1대 다인 다중행 서브커리는 IN이 업으면 오류가 난다. 
-- IN은 =과 OR 연산이므로, 현재 IN의 뜻은 WHERE SAL = 5000 OR SAL 1300 OR SAL = 800 OR SAL = 950
-- ANY(OR의 결합), ALL(AND의 결합, 크냐고 물으면 가장 큰값보다 커야한다)은 여러개의 값들의 대해서 각각 비교하고 
-- 앞에 다른 기본 연산자를 사용 가능하다. EX) = ANY, < ALL 
SELECT ENAME, SAL, DEPTNO FROM EMP WHERE ENAME IN (SELECT MIN(ENAME) FROM EMP GROUP BY DEPTNO);

-- 오류가 나는 이유는 GROUP BY했는데 MIN(SAL)인 사람의 이름을 보여줄 수는 없다.
SELECT EANME, MIN(SAL) FROM EMP GROUP BY DEPTNO;
-- 하지만, 집계형 값과 GROUP BY에 참여한 것만 가능하다.
SELECT DEPTNO, MIN(SAL) FROM EMP GROUP BY DEPTNO;
-- https://carami.tistory.com/18?category=552237 참고하기

-- 같은 결과값을 가지는 OR문의 나열과 IN 사용법, 여러개의 값이 나오면 IN, ANY, ALL을 사용하기.
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE DEPTNO = 10 OR DEPTNO = 20;
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE DEPTNO IN (10, 20);

-- 각 부서별 평균 급여보다 가장 작게 받는 사람의 정보를 알고 싶어요.
SELECT * FROM EMP WHERE SAL < ALL(SELECT AVG(SAL) FROM EMP GROUP BY DEPTNO);

-- 각 부서별로 최대 급여를 받는 사원의 정보를 구하고 싶어요.
-- 부서가 같고 MAX(SAL)값이랑 같은 사람을 찾는다
SELECT E.ENAME, E.DEPTNO, E.SAL FROM EMP E, (SELECT DEPTNO,MAX(SAL) MSAL FROM EMP GROUP BY DEPTNO) M  
WHERE E.DEPTNO = M.DEPTNO AND E.SAL = M.MSAL; 

-- 각 사람이 각 부서에 최대급여를 받는지 알고 싶어요. 최대급여를 받아와서 하나씩 비교해서 같는지 확인하는 것이다.
-- OUT커리인 E.DEPTNO를 받아서 IN커리에 넣어서 실행할 수 있다. 부서번호를 이용해서 서브커리로 부서 최대급여를 찾는것이다.
-- 서브커리가 항상 먼저 실행된다. (옳은 예시)
SELECT ENAME, DEPTNO, SAL FROM EMP E WHERE SAL = (SELECT MAX(SAL) FROM EMP WHERE DEPTNO = E.DEPTNO);
-- 그냥 이렇게 실행해버리면, 각 부서로 나누어서 받는게 아니라서 IN에 값이 포함되버려서 잘못된 결과가 나온다.
-- 부서별 최대급여가 아니라 아무거나 최댓값이랑 맞는 사람들이 있으면 포함해버린다. (틀린 예시)
SELECT ENAME, DEPTNO, SAL FROM EMP WHERE SAL IN (SELECT MAX(SAL) FROM EMP GROUP BY DEPTNO);
-- IN을 사용하려면, DEPTNO를 사용해서 부서와 비교할 수 있다. (옳은 예시)
SELECT ENAME, DEPTNO, SAL FROM EMP WHERE (DEPTNO,SAL) IN (SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO);

SELECT * FROM EMP;
UPDATE EMP SET SAL=2450 WHERE EMPNO=7369;

-- NOT IN 은 포함하지 않는다고 생각하면 된다.
SELECT * FROM EMP WHERE DEPTNO NOT IN (10,20);

-- AND와 OR연산자중에는 AND가 먼저이니 순서에 주의하여야한다.
-- 10번부서에서 매니저인 사람과 20번 부서인 사람이라는 뜻이 된다.
SELECT * FROM EMP WHERE JOB = 'MANAGER' AND DEPTNO = 10 OR DEPTNO = 20;
-- 20번 부서에 매니저인 사람들과 10번 부서인 사람이라는 뜻이 된다.
SELECT * FROM EMP WHERE DEPTNO = 10 OR DEPTNO = 20 AND JOB = 'MANAGER';
-- 10번이랑 20번부서에서 매니저인 사람들들 찾는다는 뜻으로 옳은 정답이다.
SELECT * FROM EMP WHERE JOB = 'MANAGER' AND (DEPTNO = 10 OR DEPTNO = 20);

-- ##테이블생성
CREATE TABLE member(
no INT NOT NULL Primary key,
email VARCHAR(50) NOT NULL,
passwd VARCHAR(20) NOT NULL,
name VARCHAR(25),
department_name VARCHAR(25));
 -- 테이블 확인하기
 SHOW TABLES;
 DESC MEMBER;
 
 CREATE TABLE Board(
 no INT PRIMARY KEY, 
 title VARCHAR(50) NOT NULL,
 contents VARCHAR(200),
 member_id INT,
 reg_date datetime);
 -- 테이블 확인하기
 SHOW TABLES;
 
 -- #테이블 수정
 -- member 테이블에 juminbunho char 타입, 반드시 입력되어야 하는 칼럼을 추가 하세요. desc member로 추가 결과를 확인해 보세요. 
 ALTER TABLE member ADD juminbunho CHAR(13) NOT NULL;
 -- 테이블 확인하기(juminbunho)
 DESC member;
 
 -- 전화번호를 추가하기(ADD)
 ALTER TABLE member ADD PHONE_NUMBER CHAR(11) NOT NULL;
  ALTER TABLE member DROP PHONE_NUMBER;
 -- 주민번호 삭제하기(DROP)
 ALTER TABLE member DROP juminbunho;
 -- member 테이블에 회원 가입날짜 DATETIME 타입의 join_date 이름의 칼럼을 추가 하세요. 반드시 입력되어야 하는 컬럼입니다.
ALTER TABLE member ADD join_date DATETIME NOT NULL;

-- Member 테이블의 Primary Key no에 자동 1씨기 증가하는 속성을 추가 해 보세요.
ALTER TABLE member CHANGE no member_id int auto_increment;
-- board 테이블의 Primary Key no에 자동 1씨기 증가하는 속성을 추가 해 보세요.
ALTER TABLE board CHANGE no board_id int auto_increment;
alter table board change number_id member_id int auto_increment;
-- 확인하기 
desc board;

-- 디폴트값으로 현재의 타임스탬프 지정하기
ALTER TABLE member MODIFY join_date datetime default current_timestamp;

-- 마지막에 디폴트를 적어서 디폴트값을 지정해주기
INSERT member VALUES(NULL, 'carami@nate.com', '1234', 'kang', '200', default);

-- foreign key 제약 조건을 걸어주기(테이블 생성전에도 디폴트값으로 줄 수 있고, 생성하고 이렇게 추가해도 가능하다)
-- FK로 제약을 걸어주면 PRIMARY KEY(주키)에 있는 값만 입력할 수 있다.
ALTER TABLE board ADD CONSTRAINT board_fk foreign key(member_id) references member(member_id);
INSERT BOARD(title, member_id) Values('제목',1);
-- 값이 빈번하게 수정된다면 인덱스를 걸어놓아도 속도가 빨라지지 않으니, 인덱스를 걸 때는 여러가지 조건들을 생각해봐야한다.

-- ##데이터삽입(컬럼리스트를 나열하거나, vaules로 직접 값을 입력해주거나(NULL도 들어가야한다. 항상 짝이 맞아야한다.
-- NOT NULL인 부분은 무조건 채워줘야하고 앞에 언급된 것들의 VALUES만 적어도 입력이 가능하다)
INSERT into member(email,name,passwd) values('carami@nate.com', 'kang','1223');
INSERT into member(email,name,passwd) values('ksg201@naver.com', 'goo','1224');
INSERT into member(email,name,passwd) values('kssg201@nate.com', 'suk','12235');
INSERT into member(email,name,passwd) values('kssg201@gmail.com', 'song','1226');

desc member;
SELECT * FROM MEMBER;

-- ##데이터수정(UPDATE,SET)
-- WHERE로 지정해서 그부분만 데이터를 수정한다.
UPDATE member SET email = 'adc@adb.com', name = 'abc' WHERE member_id = 1;

-- ##데이터삭제, 삭제하고 다시 추가했다고 1이 되지않는다. int auto_increment 계속 카운트가 되는거라서 상관없이 그냥 사용하면 된다.
DELETE FROM member WHERE member_id = 1;

